#include"genepi.h"

double fer_mom_deut(int ifermi, double rndm)
{
// Preliminar choice of the Fermi distribution
  int    i(1);
  double u1, sfp, slo, imp;

//Fermi distribution from Paris potential (used for n-DVCS-Hall-A)
  double spro[2][200]=
		      {
		       {
			0.00000E+00, 0.50250E-02, 0.18466E-01, 0.42061E-01, 0.75521E-01, 0.11714E+00,
			0.16456E+00, 0.21536E+00, 0.26746E+00, 0.31920E+00, 0.36941E+00, 0.41730E+00,
			0.46242E+00, 0.50452E+00, 0.54355E+00, 0.57954E+00, 0.61262E+00, 0.64294E+00,
			0.67068E+00, 0.69603E+00, 0.71918E+00, 0.74031E+00, 0.75960E+00, 0.77720E+00,
			0.79326E+00, 0.80793E+00, 0.82133E+00, 0.83357E+00, 0.84477E+00, 0.85502E+00,
			0.86440E+00, 0.87300E+00, 0.88088E+00, 0.88811E+00, 0.89475E+00, 0.90085E+00,
			0.90646E+00, 0.91162E+00, 0.91638E+00, 0.92077E+00, 0.92482E+00, 0.92856E+00,
			0.93202E+00, 0.93522E+00, 0.93819E+00, 0.94094E+00, 0.94350E+00, 0.94588E+00,
			0.94809E+00, 0.95016E+00, 0.95209E+00, 0.95389E+00, 0.95558E+00, 0.95716E+00,
			0.95865E+00, 0.96004E+00, 0.96136E+00, 0.96260E+00, 0.96378E+00, 0.96489E+00,
			0.96594E+00, 0.96694E+00, 0.96789E+00, 0.96880E+00, 0.96966E+00, 0.97049E+00,
			0.97128E+00, 0.97204E+00, 0.97277E+00, 0.97347E+00, 0.97415E+00, 0.97480E+00,
			0.97543E+00, 0.97604E+00, 0.97663E+00, 0.97720E+00, 0.97776E+00, 0.97830E+00,
			0.97882E+00, 0.97933E+00, 0.97983E+00, 0.98032E+00, 0.98079E+00, 0.98125E+00,
			0.98170E+00, 0.98215E+00, 0.98258E+00, 0.98300E+00, 0.98341E+00, 0.98382E+00,
			0.98422E+00, 0.98461E+00, 0.98499E+00, 0.98536E+00, 0.98573E+00, 0.98609E+00,
			0.98644E+00, 0.98678E+00, 0.98712E+00, 0.98746E+00, 0.98778E+00, 0.98810E+00,
			0.98842E+00, 0.98872E+00, 0.98902E+00, 0.98932E+00, 0.98961E+00, 0.98989E+00,
			0.99017E+00, 0.99044E+00, 0.99071E+00, 0.99097E+00, 0.99123E+00, 0.99148E+00,
			0.99173E+00, 0.99197E+00, 0.99220E+00, 0.99243E+00, 0.99266E+00, 0.99288E+00,
			0.99309E+00, 0.99330E+00, 0.99350E+00, 0.99371E+00, 0.99390E+00, 0.99409E+00,
			0.99428E+00, 0.99446E+00, 0.99464E+00, 0.99481E+00, 0.99498E+00, 0.99514E+00,
			0.99530E+00, 0.99546E+00, 0.99561E+00, 0.99576E+00, 0.99590E+00, 0.99604E+00,
			0.99618E+00, 0.99631E+00, 0.99644E+00, 0.99656E+00, 0.99668E+00, 0.99680E+00,
			0.99691E+00, 0.99702E+00, 0.99713E+00, 0.99723E+00, 0.99733E+00, 0.99743E+00,
			0.99753E+00, 0.99762E+00, 0.99770E+00, 0.99779E+00, 0.99787E+00, 0.99795E+00,
			0.99803E+00, 0.99810E+00, 0.99818E+00, 0.99824E+00, 0.99831E+00, 0.99838E+00,
			0.99844E+00, 0.99850E+00, 0.99855E+00, 0.99861E+00, 0.99866E+00, 0.99871E+00,
			0.99876E+00, 0.99881E+00, 0.99886E+00, 0.99890E+00, 0.99894E+00, 0.99898E+00,
			0.99902E+00, 0.99906E+00, 0.99909E+00, 0.99913E+00, 0.99916E+00, 0.99919E+00,
			0.99922E+00, 0.99925E+00, 0.99927E+00, 0.99930E+00, 0.99932E+00, 0.99935E+00,
			0.99935E+00, 0.99937E+00, 0.99939E+00, 0.99941E+00, 0.99943E+00, 0.99945E+00,
			0.99948E+00, 0.99949E+00, 0.99951E+00, 0.99952E+00, 0.99954E+00, 0.99955E+00,
			0.99956E+00, 0.99957E+00
		       },
//----- Fermi distribution from the AV18 potential
		       {
			0.00000E+00, 0.85368E-03, 0.65497E-02, 0.20675E-01, 0.44862E-01, 0.78833E-01,
			0.12095E+00, 0.16893E+00, 0.22038E+00, 0.27320E+00, 0.32572E+00, 0.37668E+00,
			0.42526E+00, 0.47096E+00, 0.51350E+00, 0.55281E+00, 0.58893E+00, 0.62198E+00,
			0.65215E+00, 0.67962E+00, 0.70461E+00, 0.72734E+00, 0.74800E+00, 0.76680E+00,
			0.78391E+00, 0.79949E+00, 0.81370E+00, 0.82667E+00, 0.83852E+00, 0.84935E+00,
			0.85928E+00, 0.86838E+00, 0.87673E+00, 0.88440E+00, 0.89145E+00, 0.89794E+00,
			0.90392E+00, 0.90943E+00, 0.91451E+00, 0.91920E+00, 0.92354E+00, 0.92755E+00,
			0.93125E+00, 0.93469E+00, 0.93787E+00, 0.94082E+00, 0.94355E+00, 0.94609E+00,
			0.94846E+00, 0.95066E+00, 0.95270E+00, 0.95461E+00, 0.95640E+00, 0.95807E+00,
			0.95963E+00, 0.96109E+00, 0.96246E+00, 0.96376E+00, 0.96498E+00, 0.96612E+00,
			0.96721E+00, 0.96824E+00, 0.96922E+00, 0.97014E+00, 0.97103E+00, 0.97187E+00,
			0.97268E+00, 0.97345E+00, 0.97419E+00, 0.97490E+00, 0.97558E+00, 0.97624E+00,
			0.97688E+00, 0.97750E+00, 0.97809E+00, 0.97867E+00, 0.97923E+00, 0.97978E+00,
			0.98031E+00, 0.98083E+00, 0.98134E+00, 0.98183E+00, 0.98231E+00, 0.98278E+00,
			0.98325E+00, 0.98370E+00, 0.98414E+00, 0.98457E+00, 0.98500E+00, 0.98541E+00,
			0.98582E+00, 0.98622E+00, 0.98662E+00, 0.98700E+00, 0.98738E+00, 0.98776E+00,
			0.98812E+00, 0.98848E+00, 0.98884E+00, 0.98918E+00, 0.98953E+00, 0.98986E+00,
			0.99019E+00, 0.99051E+00, 0.99083E+00, 0.99114E+00, 0.99145E+00, 0.99175E+00,
			0.99205E+00, 0.99234E+00, 0.99263E+00, 0.99291E+00, 0.99318E+00, 0.99345E+00,
			0.99372E+00, 0.99397E+00, 0.99423E+00, 0.99448E+00, 0.99472E+00, 0.99497E+00,
			0.99520E+00, 0.99543E+00, 0.99566E+00, 0.99588E+00, 0.99610E+00, 0.99631E+00,
			0.99652E+00, 0.99672E+00, 0.99692E+00, 0.99712E+00, 0.99731E+00, 0.99749E+00,
			0.99768E+00, 0.99786E+00, 0.99803E+00, 0.99820E+00, 0.99837E+00, 0.99853E+00,
			0.99869E+00, 0.99885E+00, 0.99900E+00, 0.99915E+00, 0.99929E+00, 0.99943E+00,
			0.99957E+00, 0.99970E+00, 0.99983E+00, 0.99996E+00, 1.00009E+00, 1.00021E+00,
			1.00033E+00, 1.00044E+00, 1.00055E+00, 1.00066E+00, 1.00077E+00, 1.00087E+00,
			1.00097E+00, 1.00107E+00, 1.00117E+00, 1.00126E+00, 1.00135E+00, 1.00144E+00,
			1.00152E+00, 1.00160E+00, 1.00168E+00, 1.00176E+00, 1.00184E+00, 1.00191E+00,
			1.00198E+00, 1.00205E+00, 1.00212E+00, 1.00218E+00, 1.00225E+00, 1.00231E+00,
			1.00237E+00, 1.00243E+00, 1.00248E+00, 1.00254E+00, 1.00259E+00, 1.00264E+00,
			1.00269E+00, 1.00274E+00, 1.00278E+00, 1.00283E+00, 1.00287E+00, 1.00291E+00,
			1.00295E+00, 1.00299E+00, 1.00303E+00, 1.00307E+00, 1.00310E+00, 1.00314E+00,
			1.00317E+00, 1.00320E+00, 1.00323E+00, 1.00326E+00, 1.00329E+00, 1.00332E+00,
			1.00335E+00, 1.00337E+00
		       }
		      };

// Fermi distributions parameters
   double star[2]= {2.e-03, 5.e-03};
   double slop[2]= {5.e-03, 5.e-03};

// Bounded random probability 
  u1 = rndm*spro[ifermi][198];
  if(u1 <= spro[ifermi][0])
  {
    imp = 0.0;
    return imp;
  }

  while(u1 >= spro[ifermi][i])
  {
    i++;
  }

  if(i == 1)
  {
    imp = star[ifermi]*u1/spro[ifermi][i];
  }
  else
  {
    slo = log(spro[ifermi][i]) - log(spro[ifermi][i-1]);
    sfp = log(u1)              - log(spro[ifermi][i-1]);
    imp = star[ifermi] + (i-2)*slop[ifermi] + (slop[ifermi]*sfp/slo);
  }

  return imp;
}
